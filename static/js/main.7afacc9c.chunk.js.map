{"version":3,"sources":["redux/reducers/map-reduser.ts","assets/images/bus-stop-pointer.svg","components/Map/Map.tsx","components/Map/MapContainer.tsx","utils/ConvertDataUtils.ts","App.tsx","utils/GoogleMapsUtils.ts","redux/store.ts","index.tsx"],"names":["SET_STATIONS","initialState","stations","setStationsAC","type","mapReduser","state","action","Map","mapType","mapTypeControl","ref","useRef","useState","map","setMap","initMap","current","google","maps","center","lat","lng","zoom","streetViewControl","zoomControl","mapTypeId","draggableCursor","useEffect","markers","stat","i","Marker","position","icon","StationMarker","infoWindows","station","contentString","name","InfoWindow","content","MarkerClusterer","imagePath","minimumClusterSize","forEach","marker","index","addListener","open","className","id","MapContainer","setStations","this","props","url","fetch","method","then","x","text","response","a","newArr","split","shift","length","splice","convertDataToObject","catch","console","log","React","Component","connect","ownProps","App","googleMapsScriptLoaded","setScriptLoaded","googleMapsURL","scripts","document","getElementsByTagName","src","indexOf","googleMapsScript","createElement","async","defer","window","body","appendChild","LoadMapAPI","addEventListener","MapTypeId","ROADMAP","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7afacc9c.chunk.js","sourcesContent":["import { StationType } from \"../../types\";\n\nconst SET_STATIONS = 'SET_STATIONS';\n\nlet initialState = {\n    stations: [] as Array<StationType>,\n}\n\ntype InitialStateType = typeof initialState;\n\ntype ActionType = ReturnType<typeof setStationsAC>;\n\nconst mapReduser = (state = initialState, action:ActionType):InitialStateType => {\n    switch(action.type) {\n        case SET_STATIONS: {\n            return {...state, stations: action.stations}\n        }\n        default: \n            return state;\n    }\n}\n\nexport const setStationsAC = (stations:Array<StationType>) => ({ type: SET_STATIONS, stations } as const)\n\nexport default mapReduser;\n\nexport type InitialState = typeof initialState;","export default __webpack_public_path__ + \"static/media/bus-stop-pointer.00286be9.svg\";","import React, { useRef, useState, useEffect } from 'react';\nimport { StationType } from '../../types';\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\nimport StationMarker from '../../assets/images/bus-stop-pointer.svg';\n\ninterface IMap {\n  mapType: google.maps.MapTypeId;\n  mapTypeControl?: boolean;\n  stations: Array<StationType> | null;\n}\n\n\nconst Map: React.FC<IMap> = ({ mapType, mapTypeControl = false, stations = null }: IMap) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<google.maps.Map>();\n  const startMap = (): void => {\n    if (!map) {\n      initMap();\n    }\n  }\n  const initMap = (): void => {\n    if (ref.current) {\n      setMap(\n        new google.maps.Map(ref.current, {\n          center: { lat: 53.9026082632717, lng: 27.561423680539768 },\n          zoom: 18,\n          mapTypeControl: mapTypeControl,\n          streetViewControl: false,\n          zoomControl: true,\n          mapTypeId: mapType,\n          draggableCursor: 'pointer',\n        }),\n      );\n    }\n  }\n\n  useEffect(startMap);\n\n  if (map && stations) {\n    const markers = stations.map((stat, i) => {\n      return new google.maps.Marker({\n        position: { lat: stat.lat, lng: stat.lng },\n        map: map,\n        icon: StationMarker,\n      })\n    })\n\n    const infoWindows = stations.map((station, i) => {\n      const contentString =\n        '<div id=\"content\">' +\n        '<div id=\"bodyContent\">' +\n        `<p><b>Остановка:</b> ${station.name}</p>` +\n        \"</div>\" +\n        \"</div>\";\n\n      return new google.maps.InfoWindow({\n        content: contentString,\n      })\n    })\n\n    new MarkerClusterer(map, markers, {\n      imagePath:\n        \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n      minimumClusterSize: 3,\n    });\n\n    markers.forEach((marker, index) => marker.addListener(\"click\", () => infoWindows[index].open(map, marker)));\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div ref={ref} className=\"map\" id=\"map\"></div>\n    </div>\n  )\n};\n\nexport default Map;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setStationsAC } from '../../redux/reducers/map-reduser';\nimport { AppStateType } from '../../redux/store';\nimport { convertDataToObject } from '../../utils/ConvertDataUtils';\nimport Map from './Map';\n\ntype Props = {\n  mapType: google.maps.MapTypeId\n  mapTypeControl?: boolean\n}\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\ninterface MapProps extends StateProps, DispatchProps { }\ninterface MapState extends StateProps { }\n\nclass MapContainer extends React.Component<MapProps, MapState> {\n  componentDidMount() {\n    const { setStations } = this.props;\n    const proxyurl = \"https://powerful-depths-31495.herokuapp.com/\";\n    const url = \"http://www.minsktrans.by/city/minsk/stops.txt\";\n    fetch((proxyurl + url), { method: 'GET' }).then(x => {\n      return x.text()\n    }).then((response) => {\n      let a = convertDataToObject(response);\n      setStations(a);\n    }).catch(() => console.log(\"Can’t access \" + url + \" response.\"));\n  }\n\n  render() {\n    const { stations, mapType, mapTypeControl } = this.props;\n    return <Map mapType={mapType} mapTypeControl={mapTypeControl} stations={stations} />\n  }\n}\n\n\nlet mapStateToProps = (state: AppStateType, ownProps: Props) => {\n  return {\n    stations: state.map.stations,\n    mapType: ownProps.mapType,\n    mapTypeControl: ownProps.mapTypeControl,\n  }\n}\n\nlet mapDispatchToProps = { setStations: setStationsAC };\n\n\n\nexport default connect(mapStateToProps, { setStations: setStationsAC })(MapContainer);","import { StationType } from \"../types\";\n\n\nexport const convertDataToObject = (text: string): Array<StationType> => {\n  let arrayFromTxt = text.split('\\n');\n  let newArr = arrayFromTxt.map(i => i.split(';'));\n  newArr.shift();\n\n  for (let i = 0; i < newArr.length; i++) {\n    newArr[i][6] = (+newArr[i][6] / 100000) + '';\n    newArr[i][7] = (+newArr[i][7] / 100000) + '';\n  }; // fix geolocation coordinates\n\n  for (let i = 0; i < newArr.length; i++) {\n    newArr[i] = [newArr[i][0], newArr[i][4], newArr[i][6], newArr[i][7]];\n  }; // remove not used graphs\n\n  for (let i = 0; i < newArr.length; i++) {\n    if (+newArr[i][2] === 0 || +newArr[i][3] === 0) {\n      newArr.splice(i, 1);\n      i--;\n    }\n  }; // remove zero GPS coordinats\n\n\n  for (let i = 0; i < newArr.length; i++) {\n    /* eslint-disable */\n    (newArr[i][1] === '?' || newArr[i][1] === '') ? newArr[i][1] = \"Названия остановки нет в базе Минсктранс\" : newArr[i][1];\n  }; // replace unnamed stations with default text\n\n  return newArr.map(x => {\n    return {\n      id: +x[0],\n      name: x[1],\n      lng: +x[2],\n      lat: +x[3]\n    }\n  });\n};\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { LoadMapAPI } from './utils/GoogleMapsUtils';\nimport MapContainer from './components/Map/MapContainer';\n\n\nfunction App() {\n  const [googleMapsScriptLoaded, setScriptLoaded] = useState(false);\n\n  useEffect ( () => {\n    const googleMapsScript = LoadMapAPI();\n    googleMapsScript.addEventListener('load', function() {\n      setScriptLoaded(true);\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Все остановки г.&nbsp;Минска на карте</h1>\n      {googleMapsScriptLoaded && <MapContainer mapType={google.maps.MapTypeId.ROADMAP} mapTypeControl={true} />}\n  </div>\n  );\n}\n\nexport default App;\n","export const LoadMapAPI = () => {\n  const googleMapsURL = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC1RxBwFCI5may63paqpyDNJYzvC_svJqU&region=BY&language=ru&v=weekly\";\n  const scripts = document.getElementsByTagName('script');\n\n  for (let i = 0; i < scripts.length; i++) {\n    if (scripts[i].src.indexOf(googleMapsURL) === 0) {\n      return scripts[i];\n    }\n  }\n\n  const googleMapsScript = document.createElement('script');\n  googleMapsScript.src = googleMapsURL;\n  googleMapsScript.async = true;\n  googleMapsScript.defer = true;\n  window.document.body.appendChild(googleMapsScript);\n\n  return googleMapsScript;\n};","import { combineReducers, createStore } from \"redux\";\nimport mapReduser from \"./reducers/map-reduser\";\n\nlet rootReducer = combineReducers({\n    map: mapReduser,\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>\n\nlet store = createStore(rootReducer);\n\n// @ts-ignore\nwindow.store = store;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}